#!/usr/bin/python

import fcntl
import os
import subprocess
import sys
import shutil

DISTS_MIRROR = "rsync://archive.ubuntu.com/ubuntu/dists/"
PORTS_MIRROR = "rsync://ports.ubuntu.com/ubuntu-ports/dists/"
DIR = os.path.abspath(os.path.dirname(__file__))

DISTS_DIR = os.path.join(DIR, "dists")

exclude = [
    'installer-*',
    'Contents-*',
    'dist-upgrader-all',
    'uefi',
    'i18n',
    '*.gz',
    'Packages',
    'Sources',
]

def download(url):
    command = [
        'rsync', '-aP',
        '--exclude=.git',
        '--exclude=.gitignore']
    with open(os.path.join(DIR, 'excludes.list'), 'r') as exclude_frozen:
        for line in exclude_frozen:
            exclude.append(line.strip())
    command.extend(['--exclude=' + e for e in exclude])
    command.extend([url, DISTS_DIR])
    print(command)
    subprocess.check_call(command)

###
#
# snapshot: If changed, take a new snapshot of the mirror's dists/
# directory
def main(args):
    with open(os.path.join(DIR, 'dists.lock'), 'w') as lock:
        fcntl.lockf(lock, fcntl.LOCK_EX | fcntl.LOCK_NB)

        p = subprocess.Popen(['date', '+%z'], stdout=subprocess.PIPE)
        TZ, _ = p.communicate()

        if not os.path.exists(DISTS_DIR):
            subprocess.check_call(['git', 'init', DISTS_DIR])
            with open(os.path.join(DISTS_DIR, '.gitignore'), 'w') as f:
                f.write('*.gz\n*.bz2\n')
            pre_commit = os.path.join(DISTS_DIR, '.git', 'hooks', 'pre-commit')
            shutil.copyfile(os.path.join(DIR, 'apt-release-verify'), pre_commit)
            os.chmod(pre_commit, 0o755)
            subprocess.check_call(['git', 'add', '.gitignore'],
                                  cwd=DISTS_DIR)
            subprocess.check_call(['git', 'commit',
                                   '-m', 'Initial commit',
                                   '--date', '1970-01-01 00:00:00'],
                                  cwd=DISTS_DIR)
        download(DISTS_MIRROR)
        download(PORTS_MIRROR)

        newest_timestamp = 0
        for root, dirs, files in os.walk(DISTS_DIR):
            if '.git' in dirs:
                dirs.remove('.git')

            for f in files:
                newest_timestamp = max(newest_timestamp,
                                       os.stat(os.path.join(root, f)).st_mtime)

        for root, dirs, files in os.walk(DISTS_DIR):
            if '.git' in dirs:
                dirs.remove('.git')
            for f in files:
                if f.endswith('.bz2'):
                    compressed = os.path.join(root, f)
                    uncompressed = compressed[:-len('.bz2')]
                    #if not os.path.exists(uncompressed) or os.path.getmtime(compressed) > os.path.getmtime(uncompressed):
                    subprocess.check_call(
                            ['bunzip2', '-c'],
                            stdin=open(compressed),
                            stdout=open(uncompressed, 'w'))

        subprocess.check_call(['git', 'add', '-A'],
                              cwd=DISTS_DIR)

        if 1 == subprocess.call(['git', 'diff-index',
                                 '--cached',
                                 '--quiet',
                                 'HEAD'],
                                cwd=DISTS_DIR):
            env = dict(os.environ)
            env['GIT_AUTHOR_DATE'] = '%s %s' % (newest_timestamp, TZ)
            env['GIT_COMMITTER_DATE'] = '%s %s' % (newest_timestamp, TZ)
            subprocess.check_call(['git', 'commit',
                                   '-m', 'Auto-generated commit'],
                                  cwd=DISTS_DIR,
                                  env=env)
            subprocess.call(['git', 'repack', '-a', '-d', '--depth=256', '--window=1024'])

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
