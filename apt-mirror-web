#!/usr/bin/python3

import os
import subprocess

import cherrypy

DIR = os.path.abspath(os.path.dirname(__file__))

DISTS_DIR = os.path.join(DIR, "dists")
CACHE_DIR = os.path.join(DIR, "cache")


def cat_blob(obj):
    try:
        subprocess.check_call(['git', 'cat-file', '-e', obj],
                              cwd=DISTS_DIR)
        return subprocess.Popen(['git', 'cat-file',
                                 'blob',
                                 obj],
                                cwd=DISTS_DIR,
                                stdout=subprocess.PIPE)
    except subprocess.CalledProcessError:
        raise cherrypy.HTTPError(404)


class Controller(object):
    def dists(self, timestamp, path):
        cherrypy.response.headers['Content-Type'] = 'text/plain'
        if path.endswith('.gz'):
            cherrypy.response.headers['Content-Type'] = 'application/x-gzip'
        elif path.endswith('.bz2'):
            cherrypy.response.headers['Content-Type'] = 'application/x-bzip2'

        p = subprocess.Popen(['git', 'rev-list',
                              '--min-age=%s' % timestamp.encode('utf-8'),
                              '-1',
                              'HEAD'],
                             stdout=subprocess.PIPE,
                             cwd=DISTS_DIR)
        commit, _ = p.communicate()
        commit = commit.strip()

        if not commit:
            raise cherrypy.HTTPError(404)

        try:
            return cat_blob('%s:%s' % (commit, path)).stdout
        except cherrypy.HTTPError:
            if path.endswith('.gz'):
                p = cat_blob('%s:%s' % (commit, path[:-len('.gz')]))
                return subprocess.Popen(['gzip', '-cn9'],
                                        stdin=p.stdout,
                                        stdout=subprocess.PIPE).stdout
            if path.endswith('.bz2'):
                p = cat_blob('%s:%s' % (commit, path[:-len('.bz2')]))
                return subprocess.Popen(['bzip2', '-c9'],
                                        stdin=p.stdout,
                                        stdout=subprocess.PIPE).stdout

            raise cherrypy.HTTPError(404)

d = cherrypy.dispatch.RoutesDispatcher()
c = Controller()
d.connect('dists',
          '/{timestamp}/dists/{path:.*?}',
          c,
          action='dists')
conf = {
    '/': {'request.dispatch': d},
}

def application(environ, start_response):
    cherrypy.tree.mount(None, config=conf)
    return cherrypy.tree(environ, start_response)
